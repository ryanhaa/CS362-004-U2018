        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:
        2:   10:void asserttrue(int a,int b)
        -:   11:{
        2:   12:  if (a == b)
        2:   13:    printf("Test Passed:\n Should be: %d\n Was: %d\n",b,a );
        -:   14:  else
    #####:   15:    printf("Test Failed:\n Should be: %d\n Was: %d\n",b,a );
        2:   16:}
        -:   17:
        1:   18:int main () {
        -:   19:
        -:   20:
        1:   21:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   22:         remodel, smithy, village, baron, great_hall};
        -:   23:
        -:   24:  struct gameState G;
        -:   25:
        1:   26:  initializeGame(2, k, 1, &G);
        1:   27:  printf ("Testing drawCard.\n\n");
        -:   28:
        1:   29:  int player = 1;
        -:   30:  int hc,dc;
        -:   31:
        1:   32:  hc = G.handCount[player];
        1:   33:  dc = G.deckCount[player];
        1:   34:  drawCard(player,&G);
        1:   35:  asserttrue(G.handCount[player], hc + 1);
        1:   36:  asserttrue(G.deckCount[player], dc - 1);
        -:   37:
        -:   38:
        1:   39:  printf ("Finished Testing drawCard.\n\n");
        -:   40:
        -:   41:
        -:   42:
        1:   43:  return 0;
        -:   44:}
