        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:
        4:   10:void asserttrue(int a,int b)
        -:   11:{
        4:   12:  if (a == b)
        4:   13:    printf("Test Passed:\n Should be: %d\n Was: %d\n",b,a );
        -:   14:  else
    #####:   15:    printf("Test Failed:\n Should be: %d\n Was: %d\n",b,a );
        4:   16:}
        -:   17:
        1:   18:int main () {
        -:   19:
        -:   20:
        1:   21:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   22:         remodel, smithy, village, baron, great_hall};
        -:   23:
        -:   24:  struct gameState state ;
        -:   25:
        1:   26:  memset(&state,23,sizeof(struct gameState));
        -:   27:
        1:   28:  initializeGame(2, k, 1, &state);
        -:   29:  
        -:   30:  
        1:   31:  printf ("Testing buyCard.\n\n");
        -:   32:
        1:   33:  state.hand[0][0] = silver;
        1:   34:  state.hand[0][2] = silver;
        1:   35:  state.hand[0][3] = silver;
        1:   36:  state.hand[0][4] = silver;
        1:   37:  state.hand[0][5] = silver;
        1:   38:  state.numBuys = 10;
        -:   39:
        1:   40:  state.numBuys=0;
        1:   41:  asserttrue(buyCard(estate,&state),-1);
        1:   42:  state.numBuys=5;
        1:   43:  asserttrue(buyCard(estate,&state),0);
        -:   44:  
        -:   45:
        1:   46:  state.supplyCount[estate]=0;
        1:   47:  asserttrue(buyCard(estate,&state),-1);
        1:   48:  state.supplyCount[estate]=5;
        1:   49:  asserttrue(buyCard(estate,&state),0);
        -:   50:
        -:   51:
        1:   52:  printf ("Finished Testing buyCard.\n\n");
        -:   53:
        -:   54:
        -:   55:
        1:   56:  return 0;
        -:   57:}
