        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// global count of test failures
        -:    9:int failureCount = 0;
        -:   10:
        -:   11:
       34:   12:void asserttrue(int a,int b)
        -:   13:{
       34:   14:  if (a == b)
       33:   15:    printf("Test Passed:\n Should be: %d\n Was: %d\n",b,a );
        -:   16:  else
        1:   17:    printf("Test Failed:\n Should be: %d\n Was: %d\n",b,a );
       34:   18:}
        -:   19:
        -:   20:// runs the tests
        1:   21:int main () {
        -:   22:
        1:   23:    int bonus = 0;
        -:   24:
        -:   25:    // kingdom cards
        1:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:               remodel, smithy, village, baron, great_hall};
        -:   28:
        -:   29:    struct gameState state, stateOriginal;
        -:   30:
        1:   31:    printf ("Testing Village.\n\n");
        -:   32:
        1:   33:    memset(&state,23,sizeof(struct gameState));
        1:   34:    memset(&stateOriginal,23,sizeof(struct gameState));
        -:   35:
        -:   36:
        1:   37:    initializeGame(2, k, 1, &state);
        -:   38:
        1:   39:    memcpy(&stateOriginal, &state, sizeof(struct gameState));
        -:   40:
        1:   41:    cardEffect(village, 0, 0, 0, &state, 0, &bonus);
        -:   42:
        1:   43:    printf("%s\n","Testing handCount of player" );
        1:   44:    asserttrue(state.handCount[0],stateOriginal.handCount[0]);
        1:   45:    printf("%s\n","Testing numActions" );
        1:   46:    asserttrue(state.numActions,stateOriginal.numActions+2);
        1:   47:    printf("%s\n","Testing deckCount of player" );
        1:   48:    asserttrue(state.deckCount[0],stateOriginal.deckCount[0]-1);
        1:   49:    printf("%s\n","Testing playedCardCount of player" );
        1:   50:    asserttrue(state.playedCardCount,stateOriginal.playedCardCount + 1);
        -:   51:
        -:   52:    //no change to deck/hand size of other players
        2:   53:    for (int i = 1; i < state.numPlayers; i++)
        -:   54:    {
        1:   55:        printf("%s %d\n","Testing handCount of player",i );
        1:   56:        asserttrue(state.handCount[i],stateOriginal.handCount[i]);
        1:   57:        printf("%s %d\n","Testing deckCount of player",i );
        1:   58:        asserttrue(state.deckCount[i],stateOriginal.deckCount[i]);
        1:   59:        printf("%s %d\n","Testing discardCount of player",i );
        1:   60:        asserttrue(state.discardCount[i],stateOriginal.discardCount[i]);
        -:   61:    }
        -:   62:
        -:   63:    //check all supply count has been unchanged
        1:   64:    printf("%s\n","Testing supplyCount");
       28:   65:    for(int i = 0 ; i < treasure_map +1;i++)
        -:   66:    {
       27:   67:        asserttrue(state.supplyCount[i],stateOriginal.supplyCount[i]);
        -:   68:    }
        1:   69:    printf("%s\n","Finished Testing supplyCount");
        1:   70:    printf ("Finished Testing Village.\n\n");
        -:   71:   
        1:   72:    return 0;
        -:   73:}
